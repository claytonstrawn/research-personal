# preprocessing step. Actual data generated by Santi from CLOUDY tables

import os
import roman
import numpy as np
import matplotlib.pyplot as plt
cycle_colors = plt.rcParams['axes.prop_cycle'].by_key()['color']*4

def get_data_from_file(filename):
    f = open(filename)
    atom_fullname = filename.split('_')[-1].split('.dat')[0]
    name_dict = {'Carbon':'C','Nitrogen':'N','Magnesium':'Mg','Neon':'Ne','Silicon':'Si','Oxygen':'O'}
    atom = name_dict[atom_fullname]
    redshift = float(filename.split('_z')[1].split('_')[0])
    lines = f.readlines()
    ions = lines[0].split()[4:]
    lines = lines[1:]
    numions = len(ions)
    for i in range(numions):
        ions[i] = '%s %s'%(atom,roman.toRoman(i+1))
    temps = np.zeros(len(lines))
    densities = np.zeros(len(lines))
    Us = np.zeros(len(lines))
    ion_fractions = np.zeros((len(lines),numions))
    for i,line in enumerate(lines):
        items = line.split()
        temps[i] = float(items[0])
        densities[i] = float(items[1])
        Us[i] = float(items[2])
        for j in range(numions):
            ion_fractions[i,j] = items[j+3]
    f.close()
    return atom,redshift,ions,temps,densities,Us,ion_fractions

def find_PI_cutoff(data,threshold = .1,loud = False,min_stable_num=5):
    atom,redshift,ions,temps,densities,Us,ion_fractions = data
    unique_temps = np.unique(temps)
    ret_ts = np.zeros(len(unique_temps))
    ret_rhos = np.zeros((len(unique_temps),len(ions)))
    notransitions = np.zeros(len(ions))
    PI_or_CI = np.zeros((len(unique_temps),len(ions))) #-1 = PI, 0 = transition, +1 = CI
    for i,t in enumerate(unique_temps):
        if loud:
            print("%.2e"%t)
        ret_ts[i] = t
        d = densities[temps==t]
        f_i = ion_fractions[temps==t]
        for j,ion in enumerate(ions):
            if ion.split()[1]=='I':
                if loud:
                    print('%s is not ionized'%ion)
                ret_rhos[i,j] = np.nan
                continue
            log_frac = np.log10(f_i[:,j])
            last_10_average = np.mean(log_frac[-min_stable_num:])
            diffs = np.diff(log_frac)
            maximum = None if not np.any(diffs<0) else np.argmax(diffs<0)
            maximum = None if (maximum is not None and log_frac[maximum] - last_10_average < threshold) else maximum
            ismax = np.zeros(len(diffs))
            if maximum is not None:
                ismax[maximum] = 1
            stable = np.abs(log_frac-last_10_average)<threshold
            if maximum is not None:
                stable[:maximum] = False
            if maximum is None:
                if i>0 and PI_or_CI[i-1,j] == -1:
                    notransitions[j] = (t+unique_temps[i-1])/2.
                    if loud: 
                        print('no transition found, but %s switched from PI to CI at t=%.2e'%(ion,t))
                #all CI
                if loud:
                    print('%s all CI'%ion)
                ret_rhos[i,j] = np.nan
                PI_or_CI[i,j] = 1
            elif maximum is not None and np.all(stable[-min_stable_num:]):
                #starts w/PI, goes CI
                if log_frac[maximum]<=last_10_average+np.log10(2):
                    #PI contribution never bigger than CI
                    if i>0 and PI_or_CI[i-1,j] == -1:
                        notransitions[j] = (t+unique_temps[i-1])/2.
                        if loud: 
                            print('no transition found, but %s switched from PI to CI at t=%.2e'%(ion,t))
                    ret_rhos[i,j] = np.nan
                    PI_or_CI[i,j] = 1
                    if loud:
                        print('%s has small PI spike at max %.2e, but still CI dominated'%(ion,d[np.argmax(stable)]))
                else:
                    #PI contribution bigger than CI for some range
                    ret_rhos[i,j] = 10.**np.interp(-(last_10_average+np.log10(2)),-log_frac[maximum:],np.log10(d[maximum:]))
                    PI_or_CI[i,j] = 0
                    if loud:
                        print('%s starts PI, goes CI at %.2e'%(ion,d[np.argmax(stable)]))
            else:
                #all PI
                if loud:
                    print('%s all PI'%ion)
                ret_rhos[i,j] = np.nan
                PI_or_CI[i,j] = -1
    return atom,redshift,ions,ret_ts,ret_rhos,notransitions,PI_or_CI

def get_all_data_and_cutoffs(location = '/Users/claytonstrawn/Santi_CLOUDY_data/'):
    filenames = []
    for root, dirs, files in os.walk(location):
        for name in files:
            filenames.append(os.path.join(root, name))
            name_dict = {'Carbon':'C','Nitrogen':'N','Magnesium':'Mg','Neon':'Ne','Silicon':'Si','Oxygen':'O'}
    data = []
    cutoffs = []
    for i,f in enumerate(sorted(filenames)):
        data.append(get_data_from_file(f))
        cutoffs.append(find_PI_cutoff(data[-1],threshold=.01,min_stable_num=5,loud=False))
    return sorted(data),sorted(cutoffs)

    
def plot_transitions(atom,redshift,ax=None,sorted_data=None,sorted_cutoffs=None):
    for i,d in enumerate(sorted_cutoffs):
        if d[0] == atom and d[1] == redshift:
            data_index = i
            break
    try:
        data_index
    except:
        print('no file for %s at redshift %.2f'%(atom,redshift))
    atom,redshift,ions,ret_ts,ret_rhos,notransitions,PI_or_CI = sorted_cutoffs[data_index]
    if ax==None:
        fig,ax = plt.subplots(1,1)
    xs = np.arange(len(ions)+1)
    ax.pcolormesh(xs,np.log10(np.array(ret_ts)),np.array(PI_or_CI))
    ax.set_xticks(xs+0.5)
    ax.set_xticklabels(ions)
    ax.set_xlim(xs[0],xs[-1])
    for x in xs:
        ax.plot([x,x],[2,8],color = 'white')
    ax.set_title('%s ionization mechanisms at z=%.2f'%(atom,redshift))
    ax.set_ylabel('Temperature (K)')
    return ax

def plot_fracs_at_temp(atom,redshift,temp,ax=None,ions=None,show_mechanism = False,sorted_data=None,sorted_cutoffs=None):
    for i,d in enumerate(sorted_data):
        if d[0] == atom and d[1] == redshift:
            data_index = i
            break
    try:
        data_index
    except:
        print('no file for %s at redshift %.2f'%(atom,redshift))
    if ax==None:
        fig,ax = plt.subplots(1,1)
    atom,redshift,all_ions,temps,densities,Us,ion_fractions = sorted_data[data_index]
    atom,redshift,all_ions,ret_ts,ret_rhos,notransitions,PI_or_CI = sorted_cutoffs[data_index]
    closest_T = temps[np.argmin(np.abs(temps-temp))]
    densities_at_temp = densities[temps == closest_T]
    fractions_at_temp = ion_fractions[temps == closest_T]
    if ions is None:
        ions = all_ions
    for i,ion in enumerate(all_ions):
        if ion not in ions:
            continue
        if show_mechanism:
            mechanism = PI_or_CI[ret_ts==closest_T,i]
            if mechanism == -1:
                linestyle = '--'
            elif mechanism == 0:
                linestyle = '-'
                if ion[-2:] != ' I': 
                    plot_rho = ret_rhos[ret_ts==closest_T,i]
                    ax.loglog([plot_rho,plot_rho],[1e-10,1e10],color=cycle_colors[i],linestyle=':')
                    star_y = np.interp(plot_rho,densities_at_temp,fractions_at_temp[:,i])
                    ax.loglog([plot_rho],[star_y],color=cycle_colors[i],marker = '*',markersize = 10)
            elif mechanism == 1:
                linestyle = '-.'
        else:
            linestyle = '-'
        ax.loglog(densities_at_temp,fractions_at_temp[:,i],label = ion,linestyle = linestyle,color=cycle_colors[i])
    ax.set_ylim(1e-5,1.5)
    ax.legend(loc = 'upper right',bbox_to_anchor = (1.23,1))
    ax.set_title('%s ion fractions at z=%.2f, T=%1.2e K'%(atom,redshift,closest_T))
    ax.set_xlabel('density (cm-3)')
    ax.set_ylabel('ion fraction')
    return ax

def plot_cutoffs(atom,redshift,ax=None,ions=None,log='ticks',sorted_data=None,sorted_cutoffs=None):
    for i,d in enumerate(sorted_cutoffs):
        if d[0] == atom and d[1] == redshift:
            data_index = i
            break
    try:
        data_index
    except:
        print('no file for %s at redshift %.2f'%(atom,redshift))
    if ax==None:
        fig,ax = plt.subplots(1,1)
    atom,redshift,all_ions,ret_ts,ret_rhos,notransitions,PI_or_CI = sorted_cutoffs[data_index]
    atom,redshift,all_ions,temps,densities,Us,ion_fractions = sorted_data[data_index]
    if log == 'ticks':
        func = ax.loglog
        far_away_lims = [1e15,1e-15]
    elif log == 'values':
        func = ax.plot
        ret_ts = np.log10(ret_ts)
        ret_rhos = np.log10(ret_rhos)
        temps = np.log10(temps)
        densities = np.log10(densities)
        ion_fractions = np.log10(ion_fractions)
        far_away_lims = [15,-15]
    if ions is None:
        ions = all_ions
    for i,ion in enumerate(all_ions):
        if ion not in ions:
            continue
        if np.all(np.isnan(ret_rhos[:,i])) and notransitions[i]>0:
            plot_ts = np.array([notransitions[i],notransitions[i]])
            plot_rhos = np.array([far_away_lims[0],far_away_lims[1]])
        elif np.all(np.isnan(ret_rhos[:,i])):
            continue
        else:
            current_rhos = ret_rhos[:,i][~np.isnan(ret_rhos[:,i])]
            current_ts = ret_ts[~np.isnan(ret_rhos[:,i])]
            min_t = min(current_ts)
            max_t = max(current_ts)
            plot_ts = np.concatenate([np.array([min_t]),current_ts,np.array([max_t])])
            plot_rhos = np.concatenate([np.array([far_away_lims[0]]),current_rhos,np.array([far_away_lims[1]])])
        func(plot_rhos,plot_ts,'-',label=ion,color = cycle_colors[i])
        func(plot_rhos,plot_ts,'.',color='k',markersize=3)
    ax.legend(loc = 'lower left')
    ax.set_xlim(np.min(densities),np.max(densities))
    ax.set_ylim(np.min(temps),np.max(temps))
    ax.set_title('%s PI-CI cutoffs at z=%.2f'%(atom,redshift))
    ax.set_xlabel('density (cm-3)')
    ax.set_ylabel('Temperature (K)')
    return ax

def plot_contours(ions,redshift,ax=None, show_cutoffs= False,levels = 'default',sorted_data=None,sorted_cutoffs=None):
    if isinstance(ions,str):
        ions = [ions]
    atom = ions[0].split(' ')[0]
    for ion in ions:
        assert atom==ion.split(' ')[0]
    for i,d in enumerate(sorted_cutoffs):
        if d[0] == atom and d[1] == redshift:
            data_index = i
            break
    try:
        data_index
    except:
        print('no file for %s at redshift %.2f'%(atom,redshift))
    if ax==None:
        _,ax = plt.subplots(1,1)
    atom,redshift,all_ions,ret_ts,ret_rhos,notransitions,PI_or_CI = sorted_cutoffs[data_index]
    atom,redshift,all_ions,temps,densities,Us,ion_fractions = sorted_data[data_index]
    if show_cutoffs:
        plot_cutoffs(atom,redshift,ax=ax,ions=ions,log='values',sorted_data = sorted_data,sorted_cutoffs = sorted_cutoffs)
    if levels == 'default':
        levels = [0.01,0.1]
    for i,ion in enumerate(ions):
        ion_index = all_ions.index(ion)
        unique_temps = np.unique(temps)
        unique_densities = np.unique(densities)
        two_dim_ion_fracs = np.zeros((len(unique_temps),len(unique_densities)))
        for j,t in enumerate(unique_temps):
            two_dim_ion_fracs[j] = ion_fractions[temps==t,ion_index]
        ax.contour(np.log10(unique_densities),np.log10(unique_temps),np.log10(two_dim_ion_fracs),\
                   levels = np.log10(np.array(levels)),colors=cycle_colors[ion_index],linestyles = 'solid')
    ax.set_title('Contours for %s at z=%.2f'%(ions,redshift))
    return ax